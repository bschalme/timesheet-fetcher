plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "io.micronaut.application" version "1.2.0"
    id "com.pasam.gradle.buildinfo" version "0.1.3"
    id "org.owasp.dependencycheck" version "6.1.2"
    id "jacoco"
}

version "1.0.0-SNAPSHOT"
group "timesheet.fetcher"

repositories {
    mavenCentral()
    jcenter()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("timesheet.fetcher.*")
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-core"
    implementation "io.micronaut:micronaut-runtime"
    implementation "info.picocli:picocli"
    implementation "io.micronaut.picocli:micronaut-picocli"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-http-client"
    compileOnly "org.projectlombok:lombok"
    runtimeOnly "ch.qos.logback:logback-classic"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-inject-java"
    testImplementation "org.mockito:mockito-junit-jupiter:3.9.0"
    testImplementation "org.hamcrest:hamcrest:2.2"
    testImplementation "commons-io:commons-io:2.8.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly
// use JUnit 5 platform
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/Application.*')
        })
    }
}

application {
    mainClass.set("timesheet.fetcher.TimesheetFetcherCommand")
}

dockerBuild {
    images = ["bschalme/timesheet-fetcher:$project.version", "bschalme/timesheet-fetcher:latest"]
}
